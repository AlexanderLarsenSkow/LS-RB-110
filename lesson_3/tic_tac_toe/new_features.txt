1. joinor method 
	
	PEDAC
	
	Understanding the Problem:
		We want to write a method that adds a joining word or comma before the final number in the empty_squares (available_choices) array.
		
		Input: Empty Squares array 
		Output: A display adding the correct joining words for the number of integers available. 
		
		Explicit Requirements:
			If there are only 2 elements in the array, the output should num or num 
			If there are 3 or more elements in the array, the output should be num, num, or num 
			Provide optional parameter of a semi-colon to separate each word instead of a comma.
			Provide optional parameter of 'and' string instead of or for the final element.
			
		Implicit Requirements:
			Default parameter puncation is equal to ','
			Default parameter joiner is equal to 'or'
			3 parameters total: array, punctuation==',', joiner=='or'
	
	Examples:
		joinor([1, 2])                   # => "1 or 2"
		joinor([1, 2, 3])                # => "1, 2, or 3"
		joinor([1, 2, 3], '; ')          # => "1; 2; or 3"
		joinor([1, 2, 3], ', ', 'and')   # => "1, 2, and 3"
			
	
	Data Structure: Arrays
	
	Algorithm:
		# Iterate through and transform the array 
		# print each number with the punctuation following it 
		# If it's the last number, then print the joiner before the number
		# If the size of the array is less than 2, don't print punctuation. 
			# For the first element, print just the number
		# Join the new array into a string.
		# Call this method in the player_choice! method
	
2. Keeping Score 
		
		PEDAC
		
		Undertanding the Problem:
			Input: string from detect_winner method
			Output: integer values 
			
			# Explicit Requirements:
				# You need to increase values based on whether or not the player won or the computer won 
				
			# Implicit Requirements: 
				# Might be useful to have a SCORE hash at the start keep track of the scores. You can mutate this as you go.
				
		Examples:
			SCORE = {player: 0, computer: 0}
			
			if player_won 
				SCORE[:player] += 1 
			else 
				SCORE[:computer] += 1
			end 
			
		# Data Structure: Hash
		
		add_score!
		
		# Algorithm:
			# Create a constant SCORE with player and computer as keys and 0, for the initial score, as the values
			# Create a method that invokes detect_winner 
			# if detect_winner returns 'player' string, then add 1 to the SCORE hash for player
			# Else, add 1 to the SCORE hash for the computer.
			# Display the SCORE at the beginning in a separate method. TBD
			
			
3. Computer AI Defense 

	PEDAC
	
	Understanding the Problem:
		If the Computer sees that the player has 2 squares in a row, the computer will select the final square.
		
		Input: board hash, winning lines array 
		Output: It should return a new computer choice which is an integer 
		
		Explicit Requirements:
			# If the the player has two x's in a line, the computer will select the 3rd square as its choice.
			# The computer needs to check winning lines vs the board. If the lines at the x_marker add up to 2,
				the computer needs to select the final value in that array.
			
		Implicit Requirements:
			# The computer selects the key value of the hash based on the winning lines array options vs empty choices array
		
	Examples:
		board_values array ==	['X', ' ', 'X']
		computer chooses the second option using board.key(' ')
		
	Data Structure:	hashes and arrays 
	
	Algorithm:
		# Iterate through winning lines 
		# 
		
		
4. Computer Offense

	PEDAC 
	
	Understanding the Problem:
		If the computer has two O markers in a row based on the winning lines, It should pick the 3rd option next.
		
		Computer Offense Method:
		Input: line array 
		Output: single integer 
		
		Explicit Requirements:
			# Write a method that splits the input array by what they point at in the hash.
			# If they point at O markers, leave them alone. Take the option that points at an empty marker
			# Only make computer_square choose this option if the count of O marker is equal to 2 and the option is an available choice 
			
		Implicit Requirements:
			# Partition is a useful method here.
			
		Examples:
			[1, 2, 3]
			{1 => ' ', 2 => 'O', 3 => 'O'}
			
			after partition => [[1], [2, 3]]
			Computer should now pick 1 
			
		Data Structure: Array and Hash
		
		Algorithm:
			# Create a variable offensive_option that points to a new method COMPUTER_OFFENSE
			# COMPUTER_OFFENSE
				# Take the input array and partition it.
				# Split the array based on whether the number in the array points at an empty marker or an O marker 
				# After the split, return the single integer in the array that points to the empty marker.
			# COMPUTER_CHOICE!
				# Make computer_square equal to offensive_option if a line has 2 O_markers and empty_squares include the integer.
				
				
	5. Main Loop Refinements 
		
		PEDAC 
		
		Problem
			# Refine the main loop so that there is a generic method for both player and computer. 
		
			# Method Input: integers from player_choice and computer_choice 
			# Method Output: Should make the output mutate the board hash
		
			# Explicit Requirements:
				# Method should generalize the players and make it so we don't need to break after every player / computer method call.
				
			# Implicit Requirements:
				# Method needs to take integer values and change those values in the hash.
				
		Examples:
			# board[player_choice()] = X_MARKER
			#	board[computer_choice()] = O_MARKER
				
		Data Structure: Hash
		
		Algorithm:
			# If alternate player returns 1
				# Call player_choice
				# Mutate the board
			# Else it equals 0
				#	Call computer_choice
				# Mutate the board
		
	