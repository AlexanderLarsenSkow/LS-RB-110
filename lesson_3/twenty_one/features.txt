Game Rules:
	# The idea is like Blackjack. 
	# If you hit 21, you have the best possible hand. If you go over 21, you lose.
	# Take a deck of cards
	# Start with 2 random cards that are "dealt" to you.
	# Player vs. the dealer
	# Player decides to hit or stay; if they hit, they get a new card.
	# Dealer decides to hit or stay based on their value. 16 and under, they should hit. 17 and over they should stay.
	
	# IF A CARD IS DEALT TO A PLAYER, THAT CARD NEEDS TO BE DELETED FROM THE DECK. 
		# The only problem with that is that then you can't access its card value anymore. Shit. Maybe we should have another deck?
		# Because this deck is like a card_values deck. We should probably have another deck where we delete cards from when they're dealt.
		# Interesting idea...

Initializing the Deck

Understanding the Problem:
	# Expected Input: Array of suits and Array of values, potentially an incrementing value? I'm not sure.
	# Expected Output: Hash with each card added to a suit pointing at their values.
	
	# Explicit Requirements:
		# Write a method that initializes a deck of 52 cards, each with a different suit.
		# The keys should be the cards and the values should be the card value in Twenty One.
		# Number card values are their own number. 
		# Face card values are worth 10.
		# Aces are worth 11.
		
	# Implicit Requirements:
		# You need SUITS
		# You need VALUES
		# You need CARDS
	
Examples:
	{"One of Hearts" => 1, "Two of Hearts" => 2}
	
Data Structure:
	# Arrays for CONSTANT values (suits, card values)
	# Hash as the return value.
		
Algorithm:
	# Declare a Cards constant with every card in an array.
	# Declare a suits constant pointing to an array of strings with the suit.
	
		METHOD
	# Create an empty hash object
	# Create a variable card_value equal to 1
	# Iterate through the cards array 
	# Iterate through the suits array
	# Use string interpolation to point at the card_value in the empty hash
	# Increment card_value by 1 
	# If the card equals Jack, Queen, or King, the card value is 10
	# If the card equals Ace, the card value is 11
	# Return the new hash.

METHOD: How should values be saved?
- Hash? {player: 0, dealer: 0}
	
CONVERTING Player and Dealer Cards to a Hash

INITIAL DEAL

Problem:
	# Input: Hash with cards for keys and integers for values 
	# Output: A smaller hash of 2 keys and 2 values from the input hash 
	
	# Explicit Requirements 
		# Take two keys and two values at random from the input hash and place them in a new hash 
		# The keys and values should be deleted from the input hash 
		
	# Implicit Requirements:
		# Deleting means to mutate entirely so the keys and values are no longer present.
		
Examples:
	# {"2 of Hearts" => 2, "Ace of Spades" => 11}
	
Data Structure:
	# Hashes 

ALGORITHM:
	Create an empty hash called cards 
	# Take the keys of the hash 
	# Take two keys at random
	# Add them to the hash pointing at the values they point at in the deck hash 
	# Delete all the pairs from the deck hash that are in the cards hash 
	

# Note: Consider changing the player_cards / dealer_cards just to a hash, with the cards as keys and the card_values as values.
	# This will make it easier to reflect the value of the Ace and change it efficiently. 
		
Determine_Ace_Value
	
	Understanding the Problem:
	
		# Input: cards array (all the cards), values hash (total_value)
		# Output: return the integer value of Ace
			
		# Explicit Requirements:
			# If the cards, with the Ace, add up to more than 21, then the Ace downgrades to 1 point. 
			# If the player has an Ace and they hit over 21, then their current Ace can be downgraded to 1.
		
		# Implicit Requirements:
			# Mutating the player_cards hash
			
			

		