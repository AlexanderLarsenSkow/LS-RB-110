Game Rules:
	# The idea is like Blackjack. 
	# If you hit 21, you have the best possible hand. If you go over 21, you lose.
	# Take a deck of cards
	# Start with 2 random cards that are "dealt" to you.
	# Player vs. the dealer
	# Player decides to hit or stay; if they hit, they get a new card.
	# Dealer decides to hit or stay based on their value. 16 and under, they should hit. 17 and over they should stay.
	
	# IF A CARD IS DEALT TO A PLAYER, THAT CARD NEEDS TO BE DELETED FROM THE DECK. 
		# The only problem with that is that then you can't access its card value anymore. Shit. Maybe we should have another deck?
		# Because this deck is like a card_values deck. We should probably have another deck where we delete cards from when they're dealt.
		# Interesting idea...

Initializing the Deck

Understanding the Problem:
	# Expected Input: Array of suits and Array of values, potentially an incrementing value? I'm not sure.
	# Expected Output: Hash with each card added to a suit pointing at their values.
	
	# Explicit Requirements:
		# Write a method that initializes a deck of 52 cards, each with a different suit.
		# The keys should be the cards and the values should be the card value in Twenty One.
		# Number card values are their own number. 
		# Face card values are worth 10.
		# Aces are worth 11.
		
	# Implicit Requirements:
		# You need SUITS
		# You need VALUES
		# You need CARDS
	
Examples:
	{"One of Hearts" => 1, "Two of Hearts" => 2}
	
Data Structure:
	# Arrays for CONSTANT values (suits, card values)
	# Hash as the return value.
		
Algorithm:
	# Declare a Cards constant with every card in an array.
	# Declare a suits constant pointing to an array of strings with the suit.
	
		METHOD
	# Create an empty hash object
	# Create a variable card_value equal to 1
	# Iterate through the cards array 
	# Iterate through the suits array
	# Use string interpolation to point at the card_value in the empty hash
	# Increment card_value by 1 
	# If the card equals Jack, Queen, or King, the card value is 10
	# If the card equals Ace, the card value is 11
	# Return the new hash.

METHOD: How should values be saved?
- Hash? {player: 0, dealer: 0}
	
CONVERTING Player and Dealer Cards to a Hash

INITIAL DEAL

Problem:
	# Input: Hash with cards for keys and integers for values 
	# Output: A smaller hash of 2 keys and 2 values from the input hash 
	
	# Explicit Requirements 
		# Take two keys and two values at random from the input hash and place them in a new hash 
		# The keys and values should be deleted from the input hash 
		
	# Implicit Requirements:
		# Deleting means to mutate entirely so the keys and values are no longer present.
		
Examples:
	# {"2 of Hearts" => 2, "Ace of Spades" => 11}
	
Data Structure:
	# Hashes 

ALGORITHM:
	Create an empty hash called cards 
	# Take the keys of the hash 
	# Take two keys at random
	# Add them to the hash pointing at the values they point at in the deck hash 
	# Delete all the pairs from the deck hash that are in the cards hash 
	

# Note: Consider changing the player_cards / dealer_cards just to a hash, with the cards as keys and the card_values as values.
	# This will make it easier to reflect the value of the Ace and change it efficiently. 
		
Determine_Ace_Value
	
	Understanding the Problem:
	
		# Input: Cards hash with keys as cards and values as integers
		# Output: return the integer value of Ace
			
		# Explicit Requirements:
			# If the cards, with the Ace, add up to more than 21, then the Ace downgrades to 1 point. 
			# If the player has an Ace and they hit over 21, then their current Ace can be downgraded to 1.
		
		# Implicit Requirements:
			# Mutating the player_cards hash
			
		# Edge Cases:
			# more than one Ace => Creates a problem where it will make both Aces equal 1
			
	Example: 
		Sum < 21 and includes Ace => "Ace" => 11
		Sum > 21 and includes Ace => "Ace" => 1
		
	Data Structure:
		# Hashes and Arrays 
		
	ALGORITHM:
		# Take the cards hash
		# If the hash includes the substring "Ace" and the sum of the values of the hash is greater than 21
		# The value the "Ace" points at should now be 1
		# If the sum is less than 21, than the "Ace" can still be 11
		
		
Hitting over Win Condition
	If the player or the dealer hits over 21, then the other player automatically wins the game. 
	
	Problem:
		Input: integer value, string for player, string for dealer
		Output: winner display 
		
		Explicit Requirements:
			# Determine if there is a winner after player and dealer turn
			# If player goes over 21, dealer wins 
			# If dealer goes over 21, player wins
			
		Implicit Requirements:
			# Idk 
			
	Examples:
		player: 22 => dealer won
		dealer: 24 => player won
		else: => keep playing 
		
		
	Data Structure:
		# Arrays 
		
	Algorithm:
		# If the current_player goes over 21, the other player wins.
		# Return other player if they won 
		# if no one went over 21, return nil 
	
Dealer Turn 
	This method should accomplish three tasks: 
		- If the dealer wants to hit, the dealer will be given a new card.
		- This card needs to be displayed to the player.
		- The dealer's card value needs to be updated and checked against win conditions constantly.
		
	Things we need to pass in:
		- Dealer's cards
		- Dealer's values
		
	Methods we already have:
		- hit! adds new card to dealer's cards
		- add_values! adds all values together.
		
	Methods we need:
		- reveal hidden dealer card
		- Display dealer values 
		- Display dealer_hit- shows the new cards.
		
		Do we need a method like player_hit! that does all the things at once? Idk. Is that kind of method even good?
		
		Things I still Need:
		- Display the Dealer's hidden card when it's their turn # DONE
		- Display the dealer's unknown card if they get blackjack. # DONE

		- I need a joinand method that displays the entire cards array in line and puts and in there too. # DONE
		- I need to think about refactoring player_turn into one or two more methods. # DON'T WORRY
		
		- Display the Values for player and dealer with each change. # DONE 
		- Display the value of 21 if the player hits that. Right now, it just breaks. # DONE

		
		FINAL WORKLOAD
		- Fix the Main Loop 
		- Refactor Dealer_Turn
		- Create an introduction / rules displays 
		- Create a scoreboard
		- Create a prompt method and migrate displays to YAML file
		
	
		Fixing the Main Loop 
		- The trouble is that the main loop is kind of a mess.
		- I have multiple return values that need to handled: 
			- player_cards, dealer_cards, player_value, and dealer_value
		- What if we simple call all those things inside a starting_deal method then don't worry about its return value
		
		Fixing Win Conditions Methods
			- The issue right now is that there are too many win condition methods.
			- Let's try to get them tied down.
			
		For reveal_dealer_card, can make a boolean default parameter that affects what displays show up.	
		
		Introduction: 
		- display welcome message 
		- display display rules
		- game start
		
		Score 
		- Need to Initialize the score: hash data structure 
				{'Player' => 0, 'Dealer' => 0}
		- also need to find a good place to display the score	- THIS FIRST	
		- Then pass the score around and add 1 if there's a winner
		- Need to add one for blackjack winner 
		- and one for the fnal outcome winner if no blackjack
		
	

